// Code generated by MockGen. DO NOT EDIT.
// Source: notebook.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	influxdb "github.com/influxdata/influxdb/v2"
	platform "github.com/influxdata/influxdb/v2/kit/platform"
)

// MockNotebookService is a mock of NotebookService interface.
type MockNotebookService struct {
	ctrl     *gomock.Controller
	recorder *MockNotebookServiceMockRecorder
}

// MockNotebookServiceMockRecorder is the mock recorder for MockNotebookService.
type MockNotebookServiceMockRecorder struct {
	mock *MockNotebookService
}

// NewMockNotebookService creates a new mock instance.
func NewMockNotebookService(ctrl *gomock.Controller) *MockNotebookService {
	mock := &MockNotebookService{ctrl: ctrl}
	mock.recorder = &MockNotebookServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotebookService) EXPECT() *MockNotebookServiceMockRecorder {
	return m.recorder
}

// CreateNotebook mocks base method.
func (m *MockNotebookService) CreateNotebook(ctx context.Context, create *influxdb.NotebookReqBody) (*influxdb.Notebook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotebook", ctx, create)
	ret0, _ := ret[0].(*influxdb.Notebook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNotebook indicates an expected call of CreateNotebook.
func (mr *MockNotebookServiceMockRecorder) CreateNotebook(ctx, create interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotebook", reflect.TypeOf((*MockNotebookService)(nil).CreateNotebook), ctx, create)
}

// DeleteNotebook mocks base method.
func (m *MockNotebookService) DeleteNotebook(ctx context.Context, id platform.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotebook", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNotebook indicates an expected call of DeleteNotebook.
func (mr *MockNotebookServiceMockRecorder) DeleteNotebook(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotebook", reflect.TypeOf((*MockNotebookService)(nil).DeleteNotebook), ctx, id)
}

// GetNotebook mocks base method.
func (m *MockNotebookService) GetNotebook(ctx context.Context, id platform.ID) (*influxdb.Notebook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotebook", ctx, id)
	ret0, _ := ret[0].(*influxdb.Notebook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotebook indicates an expected call of GetNotebook.
func (mr *MockNotebookServiceMockRecorder) GetNotebook(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotebook", reflect.TypeOf((*MockNotebookService)(nil).GetNotebook), ctx, id)
}

// ListNotebooks mocks base method.
func (m *MockNotebookService) ListNotebooks(ctx context.Context, filter influxdb.NotebookListFilter) ([]*influxdb.Notebook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotebooks", ctx, filter)
	ret0, _ := ret[0].([]*influxdb.Notebook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNotebooks indicates an expected call of ListNotebooks.
func (mr *MockNotebookServiceMockRecorder) ListNotebooks(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotebooks", reflect.TypeOf((*MockNotebookService)(nil).ListNotebooks), ctx, filter)
}

// UpdateNotebook mocks base method.
func (m *MockNotebookService) UpdateNotebook(ctx context.Context, id platform.ID, update *influxdb.NotebookReqBody) (*influxdb.Notebook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotebook", ctx, id, update)
	ret0, _ := ret[0].(*influxdb.Notebook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNotebook indicates an expected call of UpdateNotebook.
func (mr *MockNotebookServiceMockRecorder) UpdateNotebook(ctx, id, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotebook", reflect.TypeOf((*MockNotebookService)(nil).UpdateNotebook), ctx, id, update)
}
